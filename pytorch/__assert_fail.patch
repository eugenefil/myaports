See pytorch issue https://github.com/pytorch/pytorch/issues/55865.

__assert_fail is a function that is called by standard assert macro when assertion fails and NDEBUG is not defined. __assert_fail is not standardized by POSIX or C standard. Both glibc and musl libc have __assert_fail, but they differ in signatures: glibc uses unsigned int for the line parameter, while musl uses signed int.

The difference in signatures shouldn't be a problem, because its assert that is usually used and __assert_fail is an implementation detail. But c10/macros/Macros.h uses __assert_fail to define CUDA_KERNEL_ASSERT/SYCL_KERNEL_ASSERT macros.

When NDEBUG is defined by cmake on release build, __assert_fail is not declared by glibc's assert.h at all. But CUDA_KERNEL_ASSERT/SYCL_KERNEL_ASSERT need to work even with NDEBUG defined. So in this case c10/macros/Macros.h explicitly duplicates __assert_fail declaration as it is declared in glibc. And that leads to "error: conflicting declaration of C function" when building with musl, because now there are two __assert_fail declarations with differing signatures. (Note that musl always declares __assert_fail even with NDEBUG defined.)

This problem was discussed on musl's mailing list: https://www.openwall.com/lists/musl/2019/03/04/6.

diff --git a/c10/macros/Macros.h b/c10/macros/Macros.h
index 6cb10f4..1964212 100644
--- a/c10/macros/Macros.h
+++ b/c10/macros/Macros.h
@@ -393,7 +393,7 @@ __host__ __device__
     __assert_fail(
         const char* assertion,
         const char* file,
-        unsigned int line,
+        int line,
         const char* function) noexcept __attribute__((__noreturn__));
 
 #endif // __SYCL_DEVICE_ONLY__
